#!/bin/bash
# vim: set ts=4 sw=4 et:

source $XBPS_SHUTILSDIR/common.sh
source $XBPS_SHUTILSDIR/chroot.sh
source $XBPS_SHUTILSDIR/cross.sh
source $XBPS_SHUTILSDIR/pkgtarget.sh

[[ $XBPS_TARGET == binary-bootstrap ]] || {
    # base-chroot building on host
    # check for required host utils
    check_reqhost_utils bootstrap
    (
        export XBPS_ARCH=$XBPS_MACHINE
        export XBPS_SKIP_REMOTEREPOS=1
        chroot_sync_repodata
        $XBPS_LIBEXECDIR/build.sh \
            base-chroot base-chroot $XBPS_TARGET || exit 1
    ) || exit 1
    [ -d $XBPS_MASTERDIR ] && rm -rf $XBPS_MASTERDIR
}

[ "$CHROOT_READY" ] && exit

: ${XBPS_TARGET_PKG:=$XBPS_MACHINE}
# binary bootstrap
msg_normal "xbps-src: installing base-chroot...\n"
(export XBPS_MACHINE=$XBPS_TARGET_PKG XBPS_ARCH=$XBPS_TARGET_PKG; chroot_sync_repodata)
env XBPS_TARGET_ARCH=$XBPS_TARGET_PKG $XBPS_INSTALL_CMD ${XBPS_INSTALL_ARGS} -y base-chroot
if [ $? -ne 0 ]; then
    msg_error "xbps-src: failed to install base-chroot!\n"
fi
# Reconfigure base-files to create dirs/symlinks.
if xbps-query -r $XBPS_MASTERDIR base-files &>/dev/null; then
    XBPS_ARCH=$XBPS_TARGET_PKG xbps-reconfigure -r $XBPS_MASTERDIR -f base-files &>/dev/null
fi

msg_normal "xbps-src: installed base-chroot successfully!\n"
chroot_prepare $XBPS_TARGET_PKG || msg_error "xbps-src: failed to initialize chroot!\n"

if [ -f $XBPS_MASTERDIR/.xbps_chroot_init -o "$XBPS_CHROOT_CMD" = "ethereal" ]; then
    export CHROOT_READY=1
fi

chroot_handler clean
